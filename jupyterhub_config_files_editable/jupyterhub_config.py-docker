"""
jupyterhub_config.py-docker
---------------------------

Configuration for JupyterHub tutorial - used for docker deployment
"""

# SSL and hub port
# ---> Replace YOUR_DOMAIN with your domain ie. tutorial.jupyter.org
c.JupyterHub.ssl_key = '/etc/letsencrypt/live/YOUR_DOMAIN/privkey.pem'
c.JupyterHub.ssl_cert = '/etc/letsencrypt/live/YOUR_DOMAIN/fullchain.pem'
c.JupyterHub.port = 443

# User whitelist - set of users allowed to use the Hub
# ---> Replace 'USER_1' and  'USER_2' with username strings
# i.e. c.Authenticator.whitelist = {'minrk', 'takluyver'}
c.Authenticator.whitelist = {'USER_1', 'USER_2'}

# Administrators - set of users who can administer the Hub itself
# ---> Replace 'ADMIN_1' with an administrator user name i.e 'minrk'
c.Authenticator.admin_users = {'ADMIN_1'}

# Authenticator
from oauthenticator.github import GitHubOAuthenticator
c.JupyterHub.authenticator_class = GitHubOAuthenticator

# Spawner
from dockerspawner import DockerSpawner
c.JupyterHub.spawner_class = DockerSpawner

# Hub IP and port
#
# By default, the Hub's API listens on localhost.
# Yet, a docker container can't see the Hub's localhost.
# Set the Hub's IP address to the docker0 address and
# tell the Hub to listen on its docker network.
# netifaces is a convenience library to gather IP information.
import netifaces
docker0 = netifaces.ifaddresses('docker0')
docker0_ipv4 = docker0[netifaces.AF_INET][0]
c.JupyterHub.hub_ip = docker0_ipv4['addr']
